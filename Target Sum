// https://leetcode.com/problems/target-sum/
class Solution {
    int aux(int[] nums, int i, int sum, int S){
        if(i==nums.length){
           if(S == sum)return 1;
           return 0;
        }
        int pos=aux(nums,i+1,sum+nums[i],S); // all numbers with + sign
        int neg=aux(nums,i+1,sum-nums[i],S); // all numbers with - sign
        return pos + neg;
     }
    public int findTargetSumWays(int[] nums, int S) {
            return aux(nums,0,0,S);
    }
}


// top-down
// Sum1 + Sum2 = Sum 
// Sum1 - Sum2 = Target
// Sum1 = (Sum+Target)/2
class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for(int x : nums)
            sum += x;
        if(((sum - target) % 2 == 1) || (target > sum)) // in case odd or greater
            return 0;
        
        int n = nums.length;
        int val= (sum - target)/2;
        int[][] t = new int[n + 1][val + 1];
        t[0][0] = 1; // only for 0,0 value will be 1, for rest(when i=0 or j=0) => 0; (no need to initialize as in java it is zero by default.
        
        for(int i = 1; i < n + 1; i++) {
            for(int j = 0; j < val + 1; j++) {
                if(nums[i - 1] <= j)
                    t[i][j] = t[i-1][j] + t[i - 1][j - nums[i - 1]];
                else
                    t[i][j] = t[i - 1][j];
            }
        }
        return t[n][val];
    }
}
